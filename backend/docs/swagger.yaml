basePath: /api/v1
definitions:
  handlers.AnalyzeRequest:
    description: Request structure for code analysis
    properties:
      code:
        example: |-
          def hello_world():
              print('Hello, World!')
        type: string
      level:
        enum:
        - beginner
        - intermediate
        - advanced
        example: beginner
        type: string
    required:
    - code
    - level
    type: object
  handlers.AnalyzeResponse:
    description: Response structure for code analysis results
    properties:
      suggestions:
        example:
        - '[''Consider adding docstring to the function'''
        - ' ''Follow PEP 8 naming conventions'']'
        items:
          type: string
        type: array
    type: object
  handlers.FeedbackRequest:
    description: Feedback request structure
    properties:
      feedback:
        enum:
        - positive
        - negative
        - neutral
        example: positive
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - feedback
    - id
    type: object
  handlers.LoginRequest:
    description: Login request structure
    properties:
      password:
        example: secretpass123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  handlers.QueryRequest:
    description: Query request structure for AI interactions
    properties:
      level:
        enum:
        - beginner
        - intermediate
        - advanced
        example: beginner
        type: string
      query:
        example: How do I create a new file in Python?
        type: string
    required:
    - level
    - query
    type: object
  handlers.QueryResponse:
    description: Response structure for AI query results
    properties:
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      response:
        example: To create a new file in Python, you can use the open() function with
          'w' mode...
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - username
    type: object
  handlers.Settings:
    description: AI settings configuration
    properties:
      model:
        example: gpt-3.5-turbo
        type: string
      prompts:
        additionalProperties:
          type: string
        example:
          '''intermediate''': '''Provide detailed analysis...''}'
          '{''beginner''': '''Explain in simple terms...'''
        type: object
      provider:
        example: openai
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for the AI Coding Tutor IDE Plugin - A smart programming assistant
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: AI Coding Tutor API
  version: "1.0"
paths:
  /api/v1/analyze:
    post:
      consumes:
      - application/json
      description: Analyze code for best practices, improvements, and potential issues
      parameters:
      - description: Code to analyze
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/handlers.AnalyzeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AnalyzeResponse'
        "400":
          description: Invalid request format
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Analyze code
      tags:
      - Code Analysis
  /api/v1/feedback:
    post:
      consumes:
      - application/json
      description: Submit feedback for an AI interaction
      parameters:
      - description: Feedback details
        in: body
        name: feedback
        required: true
        schema:
          $ref: '#/definitions/handlers.FeedbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Feedback submitted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Query ID not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Submit feedback
      tags:
      - Feedback
  /api/v1/query:
    post:
      consumes:
      - application/json
      description: Send a query to the AI and get a response
      parameters:
      - description: Query parameters
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handlers.QueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.QueryResponse'
        "400":
          description: Invalid request format
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Query the AI
      tags:
      - AI Interaction
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {''token'': ''eyJhbG...'', ''user'': {''username'':
            ''johndoe'', ''role'': ''user''}}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Example: {''error'': ''Invalid request format''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Example: {''error'': ''Invalid credentials''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Example: {''error'': ''Failed to generate token''}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - authentication
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with their details
      parameters:
      - description: Registration details
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 'Example: {''message'': ''User registered successfully''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Example: {''error'': ''Invalid request format''} or {''error'':
            ''Email already registered''} or {''error'': ''Password must contain...''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Example: {''error'': ''Internal server error''} or {''error'':
            ''Failed to create user''}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User registration
      tags:
      - authentication
  /settings:
    get:
      consumes:
      - application/json
      description: Update the AI provider, model and prompts configuration
      parameters:
      - description: AI settings configuration
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/handlers.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: Settings updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid settings format
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update AI settings
      tags:
      - settings
  /verify-token:
    get:
      consumes:
      - application/json
      description: Verify if the provided JWT token is valid
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Verify JWT token
      tags:
      - authentication
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
